{
  "_from": "composer",
  "_id": "composer@4.0.0",
  "_inBundle": false,
  "_integrity": "sha512-SzNCI/zU47qqfP9b2Ufutl/K6++ngu20/f4m7zeWqKueojOzrDxQ9DOBOHPv5zPLwDSEQE57s7ySspAag4ZoKA==",
  "_location": "/composer",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "composer",
    "fetchSpec": "latest",
    "name": "composer",
    "raw": "composer",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/composer/-/composer-4.0.0.tgz",
  "_shasum": "cb004d755edad892fd53639f794a70eba9beff50",
  "_spec": "composer",
  "_where": "/var/www/html/trabalhos/goodbusiness",
  "author": {
    "name": "Brian Woodward",
    "url": "https://github.com/doowb"
  },
  "bugs": {
    "url": "https://github.com/doowb/composer/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://twitter.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "http://twitter.com/jonschlinkert"
    }
  ],
  "dependencies": {
    "pretty-time": "^1.1.0",
    "use": "^3.1.1"
  },
  "deprecated": false,
  "description": "Run and compose async tasks. Easily define groups of tasks to run in series or parallel.",
  "devDependencies": {
    "generate-foo": "^0.1.5",
    "gulp-format-md": "^1.0.0",
    "mocha": "^5.2.0",
    "through2": "^2.0.3"
  },
  "engines": {
    "node": ">=8"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/doowb/composer",
  "keywords": [
    "async",
    "await",
    "build",
    "build-system",
    "compose",
    "composer",
    "composition",
    "control",
    "flow",
    "run",
    "system",
    "task",
    "workflow"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "composer",
  "optionalDependencies": {},
  "readme": "# composer [![NPM version](https://img.shields.io/npm/v/composer.svg?style=flat)](https://www.npmjs.com/package/composer) [![NPM monthly downloads](https://img.shields.io/npm/dm/composer.svg?style=flat)](https://npmjs.org/package/composer) [![NPM total downloads](https://img.shields.io/npm/dt/composer.svg?style=flat)](https://npmjs.org/package/composer) [![Linux Build Status](https://img.shields.io/travis/doowb/composer.svg?style=flat&label=Travis)](https://travis-ci.org/doowb/composer) [![Windows Build Status](https://img.shields.io/appveyor/ci/doowb/composer.svg?style=flat&label=AppVeyor)](https://ci.appveyor.com/project/doowb/composer)\n\n> Run and compose async tasks. Easily define groups of tasks to run in series or parallel.\n\nPlease consider following this project's author, [Brian Woodward](https://github.com/doowb), and consider starring the project to show your :heart: and support.\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n  * [Tasks](#tasks)\n  * [Generators](#generators)\n- [Events](#events)\n- [Release history](#release-history)\n- [About](#about)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save composer\n```\n\n## Usage\n\n```js\nconst Composer = require('composer');\nconst composer = new Composer();\n\ncomposer.task('default', cb => {\n  console.log('Task: ', this.name);\n  cb();\n});\n\ncomposer.build('default')\n  .then(() => console.log('done!'))\n  .catch(console.error);\n```\n\n## API\n\n### [.create](lib/tasks.js#L28)\n\nFactory for creating a custom `Tasks` class that extends the given `Emitter`. Or, simply call the factory function to use the built-in emitter.\n\n**Params**\n\n* `Emitter` **{function}**: Event emitter.\n* `returns` **{Class}**: Returns a custom `Tasks` class.\n\n**Example**\n\n```js\n// custom emitter\nconst Emitter = require('events');\nconst Tasks = require('composer/lib/tasks')(Emitter);\n// built-in emitter\nconst Tasks = require('composer/lib/tasks')();\nconst composer = new Tasks();\n```\n\n### [Tasks](lib/tasks.js#L43)\n\nCreate an instance of `Tasks` with the given `options`.\n\n**Params**\n\n* `options` **{object}**\n\n**Example**\n\n```js\nconst Tasks = require('composer').Tasks;\nconst composer = new Tasks();\n```\n\n### [.task](lib/tasks.js#L81)\n\nDefine a task. Tasks run asynchronously, either in series (by default) or parallel (when `options.parallel` is true). In order for the build to determine when a task is complete, _one of the following_ things must happen: 1) the callback must be called, 2) a promise must be returned, or 3) a stream must be returned.\n\n**Params**\n\n* `name` **{String}**: The task name.\n* `deps` **{Object|Array|String|Function}**: Any of the following: task dependencies, callback(s), or options object, defined in any order.\n* `callback` **{Function}**: (optional) If the last argument is a function, it will be called after all of the task's dependencies have been run.\n* `returns` **{undefined}**\n\n**Example**\n\n```js\n// 1. callback\napp.task('default', cb => {\n  // do stuff\n  cb();\n});\n// 2. promise\napp.task('default', () => {\n  return Promise.resolve(null);\n});\n// 3. stream (using vinyl-fs or your stream of choice)\napp.task('default', function() {\n  return vfs.src('foo/*.js');\n});\n```\n\n### [.build](lib/tasks.js#L206)\n\nRun one or more tasks.\n\n**Params**\n\n* `tasks` **{object|array|string|function}**: One or more tasks to run, options, or callback function. If no tasks are defined, the default task is automatically run.\n* `callback` **{function}**: (optional)\n* `returns` **{undefined}**\n\n**Example**\n\n```js\nconst build = app.series(['foo', 'bar', 'baz']);\n// promise\nbuild().then(console.log).catch(console.error);\n// or callback\nbuild(function() {\n  if (err) return console.error(err);\n});\n```\n\n### [.series](lib/tasks.js#L248)\n\nCompose a function to run the given tasks in series.\n\n**Params**\n\n* `tasks` **{object|array|string|function}**: Tasks to run, options, or callback function. If no tasks are defined, the `default` task is automatically run, if one exists.\n* `callback` **{function}**: (optional)\n* `returns` **{promise|undefined}**: Returns a promise if no callback is passed.\n\n**Example**\n\n```js\nconst build = app.series(['foo', 'bar', 'baz']);\n// promise\nbuild().then(console.log).catch(console.error);\n// or callback\nbuild(function() {\n  if (err) return console.error(err);\n});\n```\n\n### [.parallel](lib/tasks.js#L301)\n\nCompose a function to run the given tasks in parallel.\n\n**Params**\n\n* `tasks` **{object|array|string|function}**: Tasks to run, options, or callback function. If no tasks are defined, the `default` task is automatically run, if one exists.\n* `callback` **{function}**: (optional)\n* `returns` **{promise|undefined}**: Returns a promise if no callback is passed.\n\n**Example**\n\n```js\n// call the returned function to start the build\nconst build = app.parallel(['foo', 'bar', 'baz']);\n// promise\nbuild().then(console.log).catch(console.error);\n// callback\nbuild(function() {\n  if (err) return console.error(err);\n});\n// example task usage\napp.task('default', build);\n```\n\n### [.create](lib/generator.js#L26)\n\nStatic factory method for creating a custom `Composer` class that extends the given `Emitter`.\n\n**Params**\n\n* `Emitter` **{function}**: Event emitter.\n* `returns` **{Class}**: Returns a custom `Composer` class.\n\n**Example**\n\n```js\nconst Emitter = require('events');\nconst Composer = require('composer').create(Emitter);\nconst composer = new Composer();\n```\n\nCreate a wrapped generator function with the given `name`, `config`, and `fn`.\n\n**Params**\n\n* `name` **{string}**\n* `config` **{object}**: (optional)\n* `fn` **{function}**\n* `returns` **{function}**\n\nReturns true if the given value is a Composer generator object.\n\n**Params**\n\n* `val` **{object}**\n* `returns` **{boolean}**\n\n### [.register](lib/generator.js#L142)\n\nAlias to `.setGenerator`.\n\n**Params**\n\n* `name` **{string}**: The generator's name\n* `options` **{object|Function|String}**: or generator\n* `generator` **{object|Function|String}**: Generator function, instance or filepath.\n* `returns` **{object}**: Returns the generator instance.\n\n**Example**\n\n```js\napp.register('foo', function(app, base) {\n  // \"app\" is a private instance created for the generator\n  // \"base\" is a shared instance\n});\n```\n\n### [.generator](lib/generator.js#L165)\n\nGet and invoke generator `name`, or register generator `name` with the given `val` and `options`, then invoke and return the generator instance. This method differs from `.register`, which lazily invokes generator functions when `.generate` is called.\n\n**Params**\n\n* `name` **{string}**\n* `fn` **{function|Object}**: Generator function, instance or filepath.\n* `returns` **{object}**: Returns the generator instance or undefined if not resolved.\n\n**Example**\n\n```js\napp.generator('foo', function(app, options) {\n  // \"app\" - private instance created for generator \"foo\"\n  // \"options\" - options passed to the generator\n});\n```\n\n### [.setGenerator](lib/generator.js#L197)\n\nStore a generator by file path or instance with the given `name` and `options`.\n\n**Params**\n\n* `name` **{string}**: The generator's name\n* `options` **{object|Function|String}**: or generator\n* `generator` **{object|Function|String}**: Generator function, instance or filepath.\n* `returns` **{object}**: Returns the generator instance.\n\n**Example**\n\n```js\napp.setGenerator('foo', function(app, options) {\n  // \"app\" - new instance of Generator created for generator \"foo\"\n  // \"options\" - options passed to the generator\n});\n```\n\n### [.getGenerator](lib/generator.js#L222)\n\nGet generator `name` from `app.generators`, same as [findGenerator], but also invokes the returned generator with the current instance. Dot-notation may be used for getting sub-generators.\n\n**Params**\n\n* `name` **{string}**: Generator name.\n* `returns` **{object|undefined}**: Returns the generator instance or undefined.\n\n**Example**\n\n```js\nconst foo = app.getGenerator('foo');\n\n// get a sub-generator\nconst baz = app.getGenerator('foo.bar.baz');\n```\n\n### [.findGenerator](lib/generator.js#L255)\n\nFind generator `name`, by first searching the cache, then searching the cache of the `base` generator. Use this to get a generator without invoking it.\n\n**Params**\n\n* `name` **{string}**\n* `options` **{function}**: Optionally supply a rename function on `options.toAlias`\n* `returns` **{object|undefined}**: Returns the generator instance if found, or undefined.\n\n**Example**\n\n```js\n// search by \"alias\"\nconst foo = app.findGenerator('foo');\n\n// search by \"full name\"\nconst foo = app.findGenerator('generate-foo');\n```\n\n**Params**\n\n* `name` **{string}**\n* `returns` **{boolean}**\n\n**Example**\n\n```js\nconsole.log(app.hasGenerator('foo'));\nconsole.log(app.hasGenerator('foo.bar'));\n```\n\n### [.generate](lib/generator.js#L337)\n\nRun one or more tasks or sub-generators and returns a promise.\n\n**Params**\n\n* `name` **{string}**\n* `tasks` **{string|Array}**\n* `returns` **{promise}**\n\n**Events**\n\n* `emits`: `generate` with the generator `name` and the array of `tasks` that are queued to run.\n\n**Example**\n\n```js\n// run tasks `bar` and `baz` on generator `foo`\napp.generate('foo', ['bar', 'baz']);\n\n// or use shorthand\napp.generate('foo:bar,baz');\n\n// run the `default` task on generator `foo`\napp.generate('foo');\n\n// run the `default` task on the `default` generator, if defined\napp.generate();\n```\n\n### [.toAlias](lib/generator.js#L389)\n\nCreate a generator alias from the given `name`. By default, `generate-` is stripped from beginning of the generator name.\n\n**Params**\n\n* `name` **{string}**\n* `options` **{object}**\n* `returns` **{string}**: Returns the alias.\n\n**Example**\n\n```js\n// customize the alias\nconst app = new Generate({ toAlias: require('camel-case') });\n```\n\n### [.isGenerators](lib/generator.js#L410)\n\nReturns true if every name in the given array is a registered generator.\n\n**Params**\n\n* `names` **{array}**\n* `returns` **{boolean}**\n\n### [.formatError](lib/generator.js#L447)\n\nFormat task and generator errors.\n\n**Params**\n\n* `name` **{string}**\n* `returns` **{error}**\n\n### [.base](lib/generator.js#L468)\n\nGet the first ancestor instance when `generator.parent` is defined on nested instances.\n\nGet or set the generator name.\n\n**Params**\n\n* **{string}**\n\n* `returns` **{string}**\n\nGet or set the generator `alias`. By default, the generator alias is created\nby passing the generator name to the [.toAlias](#toAlias) method.\n\n**Params**\n\n* **{string}**\n\n* `returns` **{string}**\n\nGet the generator namespace. The namespace is created by joining the generator's `alias`\nto the alias of each ancestor generator.\n\n**Params**\n\n* **{string}**\n\n* `returns` **{string}**\n\nGet the depth of a generator - useful for debugging. The root generator\nhas a depth of `0`, sub-generators add `1` for each level of nesting.\n\n* `returns` **{number}**\n\nStatic method that returns true if the given `val` is an instance of Generate.\n\n**Params**\n\n* `val` **{object}**\n* `returns` **{boolean}**\n\n## Events\n\n```js\napp.on('task', function(task) {\n  switch (task.status) {\n    case 'pending':\n      // Task was registered\n      break;\n    case 'preparing':\n      // Task is preparing to run, emitted right before \"starting\"\n      // (hint: you can use this event to dynamically skip tasks\n      // by updating \"task.skip\" to \"true\" or a function)\n      break;\n    case 'starting':\n      // Task is running\n      break;\n    case 'finished':\n      // Task is finished running\n      break;\n  }\n});\n```\n\n## Release history\n\nSee the [changelog](./CHANGELOG.md).\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projects… [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble \"Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit\")\n* [generate](https://www.npmjs.com/package/generate): Command line tool and developer framework for scaffolding out new GitHub projects. Generate offers the… [more](https://github.com/generate/generate) | [homepage](https://github.com/generate/generate \"Command line tool and developer framework for scaffolding out new GitHub projects. Generate offers the robustness and configurability of Yeoman, the expressiveness and simplicity of Slush, and more powerful flow control and composability than either.\")\n* [update](https://www.npmjs.com/package/update): Be scalable! Update is a new, open source developer framework and CLI for automating updates… [more](https://github.com/update/update) | [homepage](https://github.com/update/update \"Be scalable! Update is a new, open source developer framework and CLI for automating updates of any kind in code projects.\")\n* [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… [more](https://github.com/verbose/verb) | [homepage](https://github.com/verbose/verb \"Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used on hundreds of projects of all sizes to generate everything from API docs to readmes.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 226 | [doowb](https://github.com/doowb) |\n| 64 | [jonschlinkert](https://github.com/jonschlinkert) |\n\n### Author\n\n**Brian Woodward**\n\n* [LinkedIn Profile](https://linkedin.com/in/woodwardbrian)\n* [GitHub Profile](https://github.com/doowb)\n* [Twitter Profile](https://twitter.com/doowb)\n\n### License\n\nCopyright © 2018, [Brian Woodward](https://github.com/doowb).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on July 12, 2018._",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/doowb/composer.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "verb": {
    "data": {
      "author": {
        "linkedin": "woodwardbrian",
        "twitter": "doowb"
      }
    },
    "layout": "default",
    "lint": {
      "reflinks": true
    },
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "assemble",
        "generate",
        "update",
        "verb"
      ]
    },
    "tasks": [
      "readme"
    ],
    "toc": true
  },
  "version": "4.0.0"
}
